# IronPython imports to enable Excel interop
import clr
import os
clr.AddReference("Microsoft.Office.Interop.Excel")
import Microsoft.Office.Interop.Excel as Excel

# Define working directory 
workingDir = AbsUserPathName("C:/Users/jdehart/Documents/~working/dent_build_script/Excel_Parameter_Scripting/")

def updateHandler():
    
   # Update can take long, so disable the Excel warning -
   # "Excel is waiting for another application to complete an OLE action"
   ex.Application.DisplayAlerts = False

   # Define key ranges in the Workbook
   lengthCell = worksheet.Range["A3"]
   loadCell = worksheet.Range["B3"]
   defCell = worksheet.Range["C3"]
   
   # Get the Workbench Parameters
   lengthParam = Parameters.GetParameter(Name="P1")
   loadParam = Parameters.GetParameter(Name="P2")
   defParam = Parameters.GetParameter(Name="P3")
   
   # Assign values to the input parameters
   lengthParam.Expression = lengthCell.Value2.ToString()
   loadParam.Expression = loadCell.Value2.ToString() + " [N]"
   
   # Mark the deformation parameter as updating in the workbook
   defCell.Value2="Updating..."

   # Run the project update
   Update()

   # Update the workbook value from the WB parameter
   defCell.Value2 = defParam.Value

   # restore alert setting
   ex.Application.DisplayAlerts = True

# Open the Workbench Project
Open(FilePath = os.path.join(workingDir, "ExcelParameterScripting.wbpj"))

# Open Excel and the workbook
ex = Excel.ApplicationClass()
ex.Visible = True
workbook = ex.Workbooks.Open(os.path.join(workingDir , "ParameterExample.xlsx"))
worksheet=workbook.ActiveSheet

#Apply the update handler to the workbook button
OLEbutton = worksheet.OLEObjects("CommandButton1")
commandButton = OLEbutton.Object
commandButton.CLICK += updateHandler

